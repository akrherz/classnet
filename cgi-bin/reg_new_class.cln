#!/usr/bin/perl
package main;

#
# Reg_new_class sets up a new class for authorized instructors
#

BEGIN {
   unshift(@INC,'/home/classnet/cgi-bin/lib');
}
    
# Modules to include
require "optimize.pl";

# Turn off file mask
umask 000;

# Parse incoming query into query object
$query = new CGI;

if ($query->param('back')) {
    CLASS::print_main_menu();
    exit(0);
}

# Check existence of name/value pairs needed for class registration
CN_UTILS::verify_pairs($query,'Class Name','First Name','Last Name',
       	 'Password','Verify Password','Email Address','Expiration Month');

CLASS::check_limit();

my $cname = $query->param('Class Name'); 
if ($cname =~ /[\*\/%:\(\)\\]/) {
    ERROR::user_error($ERROR::NOTDONE,"create <B>${cname}</B>. The class name may not contain the characters /%():\\");
}

my $fname = $query->param('First Name'); 
if ($fname =~ /[^a-z^A-Z]/) {
    ERROR::user_error($ERROR::NOTDONE,"create <B>${cname}</B>. Your first 
name may only contain alphabetic characters (no spaces)"); }

my $lname = $query->param('Last Name'); 
if ($lname =~ /[^a-z^A-Z]/) {
    ERROR::user_error($ERROR::NOTDONE,"create <B>${cname}</B>. Your last name may only contain alphabetic characters"); }

# Verify passwords in the form
if ($query->param('Password') ne $query->param('Verify Password')) {
     ERROR::user_error($ERROR::PWDVERIFY);
}

$cls = CLASS->new($query->param('Class Name'));

if ($cls->exists) {
     ERROR::user_error($ERROR::CLASSEX,$cls->{'Name'});
}

# Is this class already in the request list?
$req_file = "$GLOBALS::CLASSNET_ROOT_DIR/class_req";
if (-e $req_file) {
   my %list;
   open(CLASS_REQ, "<$req_file");
   flock(CLASS_REQ,$LOCK_EX);
   while(<CLASS_REQ>) {
      chop;
      my ($name,$value) = split(/=/);
      if ($name eq 'END') {
      	 ($cls->{'Name'} eq $value) and 
      	    ERROR::user_error($ERROR::CLASSAPPROVAL,$cls->{'Name'});
      } 
      else {
      	 $list{$name} = $value;
      }
   }
   flock(CLASS_REQ,$LOCK_UN);
   close CLASS_REQ;
}

# Put request in list
open(CLASS_REQ, ">>$req_file") or 
       ERROR::system_error("CLASS","create","open","class req");
flock(CLASS_REQ,$LOCK_EX);
my @names = $query->param;
foreach $name (@names) {
   print CLASS_REQ "$name=$query->{$name}->[0]\n";
}
print CLASS_REQ "END=$cls->{'Name'}\n";
flock(CLASS_REQ,$LOCK_UN);
close(CLASS_REQ);
chmod 0600, $req_file;

CN_UTILS::mail($GLOBALS::ADMIN_EMAIL,'Class Creation Request',
"$cls->{'Name'} for $query->{'First Name'}->[0] $query->{'Last Name'}->[0]");

# Send back Class Information
$enroll = $query->param('Verify Enrollment');
if ($enroll == 0) {
   $enroll_str = "Students are automatically enrolled in $cls->{'Name'} upon registration";
}
if ($enroll == 1) {
   $enroll_str = "The Instructor must approve registering students in $cls->{'Name'}.";
}
if ($enroll == 2) {
   $enroll_str = "Students may not directly register in $cls->{'Name'}. They must be added through the instructor options.";
}

CN_UTILS::print_cn_header("Request submitted");
print <<"OPT_FORM";
<DL>
   <DT><b>Class Name:</b>
   <DD> $cls->{'Name'}
   <DT><b>Student Registration:</b>
   <DD> $enroll_str
   <DT><b>Expiration Date:</b>
   <DD>$query->{'Expiration Month'}->[0]
</DL>
<P>
The above information has been submitted to the ClassNet adminstrators 
for approval. You will be notified by email when the class is available 
for use.
<P>
<CENTER><A HREF="$GLOBALS::SCRIPT_ROOT/main-menu">Return to Main Menu</A></CENTER>
OPT_FORM

CN_UTILS::print_cn_footer();


package CLASS;

sub check_limit {
   # Has the maximum number of classes been reached? 
   opendir(CLASS_DIR,$GLOBALS::CLASSNET_ROOT_DIR);  
   # Don't include . or .. directories
   my $num_classes = grep(!/^\.\.?$/, readdir(CLASS_DIR));
   closedir(CLASS_DIR);
   if ($num_classes >= $GLOBALS::MAX_CLASS) {
      ERROR::user_error($ERROR::CLASSLIMIT,$GLOBALS::MAX_CLASS);
   }
}












